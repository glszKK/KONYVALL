<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>int ***</type> háromszögmátrix</title>
        <para>
           
        </para>
<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <stdlib.h>

int
main ()
{
    int rs = 5;
    double **tb;
    
    printf("%p\n", &tb);
    
    if ((tb = (double **) malloc (rs * sizeof (double *))) == NULL)
    {
        return -1;
    }

    printf("%p\n", tb);
    
    for (int i = 0; i < rs; ++i)
    {
        if ((tb[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }

    printf("%p\n", tb[0]);    
    
    for (int i = 0; i < rs; ++i)
        for (int j = 0; j < i + 1; ++j)
            tb[i][j] = i * (i + 1) / 2 + j;

    for (int i = 0; i < rs; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tb[i][j]);
        printf ("\n");
    }

    tb[3][0] = 42.0;
    (*(tb + 3))[1] = 43.0;
    *(tb[3] + 2) = 44.0;
    *(*(tb + 3) + 3) = 45.0;

    for (int i = 0; i < rs; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tb[i][j]);
        printf ("\n");
    }

    for (int i = 0; i < rs; ++i)
        free (tb[i]);

    free (tb);

    return 0;
}
]]>
</programlisting>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:    <link xlink:href="https://github.com/lovaszbotond/Caesar/blob/master/int**"></link>            
        </para>
        <para>
A dinamikus memóriakezeléssel fogunk foglalkozni a feladat megoldása során.A feladatot a szokásos módon, a headerben a megfelelő függvénykönyvtárak behívásával kezdtük el.Létrehoztuk a <function> rs = 5 </function>-el  a sorainknak a számát amire szükségünk van.A <function>double **tb</function> deklarálunk és lefoglalunk a memóriában 8 byte-ot jelen esetben.Majd szimplán egy kiíratást végzünk . A <function>%p</function> segítségével egy hexadecimális számot fogunk ki írni mely a pointer számát fogja adni. Az adott sorban a vessző után látjuk , hogy a cimkéző operátor segítségével 1 bájt címét fogjuk ki íratni.Konkrétan lekérdezzük a címét.
A <function>malloc</function> vissza ad egy pointert a lefoglalt területre. Memóriát foglal a szabad tárban. Kap egy paramétert ami az rs függvényében zajlik.(5)Következőkben látjuk , hogy a <function>size of (double*)</function>megmondja hogy mennyi hely(byte) kell a double* típusnak, ami a feladatban 5*8 azaz 40 byte helyet fog lefoglalni.Egyébként ami vissza kapunk ponter bármire mutathat a malloc esetében.Típus kényszerítjük ami miatt a "size of" méretét fogja vissza adni. A <function>tb</function>egyenlő a malloc által vissza adott értékkel memória foglalás szempontjából.Ha bármilyen hiba merülne fel akkor pedig a program kilép. Ezt biztosítjuk a <function>==NULL</function> szekcióban.A <function>NULL</function> nem mutat sehova.A folytatásban megkreáljuk az 5 sorból álló háromszögünket.Nagyon jól lehet szemléltetni a hivatkozásainkat , hogyan és miként működnek. 
Lehet látni , hogy a <function>tb[3][0] = 42.0</function>a harmadik sor első elemét egyenlővé tesszük 42.00-val. Azért az első eleme, erről még nem beszáltünk, mert 0-tól kezdjük a számolást/indexelést.Az alatta lévő sorban a második elemre hivatkozunk, alatta a harmadik elemre, majd a negyedik elemre.A "*" al hivatkozok azon a címen tárolt pointerre.Tökéletesen reprezentálja a példa mily módon és hányféleképpen tudunk hivatkozni.A <function>for</function>ciklusukhoz különösképpen nem tudunk kiegészítést írni . A Chomsky fejezetünkben a hivatkozásos példánál kiveséztük nagy részét és a lényeg megtalálható benne ami ezen feladat megértéséhez kell.Amit esetlek meglehet említeni a <function>tb[i][j]</function>ahol az "i" a sor a "j" pedig az oszlopot jelzik.Fontos hogy vizsgáljuk a kapcsos zárójelek elhelyezkedését,hisz úgy fogjuk meg érteni mikor mi hajtódik végbe.A <function>%f</function> egy float típusú változót fog vissza adni.A végén a <function>free</function>-ről kell pár sort írnunk.Lényegében felszabadítja a memóriában tárolt/lévő pointerek által lefoglalt címeket. Ez fontos, hogy ne maradjon meg az adat amit tárol , mert ha a program még dolgozna tovább és ezt nem tennénk meg akkor egy idő után betelne a ram.
        </para>            
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <unistd.h>
#include <string.h>

#define MAX_KULCS 100
#define BUFFER_MERET 256


int
main (int argc, char **argv)
{

  char kulcs[MAX_KULCS];
  char buffer[BUFFER_MERET];

  int kulcs_index = 0;
  int olvasott_bajtok = 0;

  int kulcs_meret = strlen (argv[1]);
  strncpy (kulcs, argv[1], MAX_KULCS);

  while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
    {

      for (int i = 0; i < olvasott_bajtok; ++i)
	{

	  buffer[i] = buffer[i] ^ kulcs[kulcs_index];
	  kulcs_index = (kulcs_index + 1) % kulcs_meret;

	}

      write (1, buffer, olvasott_bajtok);

    }
}]]></programlisting>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/lovaszbotond/Caesar/blob/master/Exor%20titkos%C3%ADt%C3%B3%20e.c"></link>                
        </para>
        <para>
           Maga a program ahogy a feladat is kéri egy titkosító lesz melyhez egy x hosszu kulcsot megadba titkosíthatunk szövegeket.Megismerkedünk a headerben egy nem "#include"-al kezdődő pre-compiler által fordított függvénykönyvtárral,ami a nevéből adódóan is látjuk , hogy definíció.Nem is kell túlgondolnunk definiáljuk , hogy a <function>MAX_KULCS</function> = 100 és ezt nem fogjuk tudnu a mainen belül megváltoztatni.Szintúgy a <function>BUFFER_MERET</function>-et 256-al tesszük egyenlővé.Megadja mennyit tud egyszerre beolvasni(hány darab karaktert).Az <function>argc</function> megmondja hogy a programot hány szóval hívtam meg/fordítottam le. Tegyük fel |gcc e.c -o k.c|  akkor a spacek száma plusz 1 lesz az argc, ami jelenleg a példánkban 4.Az <function>argv</function> tárolja az argumentumokat.Tehát a parancssori argumentumok kezeléséhez szökségesek.A <function>char</function> variable egy nagyon pici 1 byte-os történet.Karaktereket deklarálunk vele.A programban a "max_kulcs", illetve a buffer amit beállítottunk neki.A kulcs méret amivel folytathatjuk. A <function>strlen</function> a string.h-ban találjuk meg , és a megadott string, hogy hány karakter hosszú azt mondja meg. A <function>strncpy</function> "string copy" pedig hogy mibe, mit , milyen hosszút. A <function>while</function> ciklusban végigolvassa a szöveget a "read" segítségével ami egészen addig olvassa a fájlt, míg a fájl vége jellel nem találkozik.Majd ha megtalálta lelövi a programot. A "buffer" méretnyit olvassa be. A write pedig ki írja az olvasott byteokat.Tehát "titkosítunk".A <function>for</function> cikluson belül a ciklus 0-tól indul , az olvasott byte-ok számáig és mindig növeljük egyel.A cikluson belül a magban a buffer "i"-edik elemét exorozzuk az adott kulcsindexel.A kulcs indexhez hozzá adunk egyet majd maradékosz osztást végzunk rajta.Ez azért kell nekünk, mert ha eléri a kulcs adott méretét akkor ismét nulláról fog indulni.A "return 0;" nem kell a program végére, mert elvégzi a feladatot és off.
        </para>            
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
<programlisting language="c"><![CDATA[
#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 5
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>

double
atlagos_szohossz (const char *titkos, int titkos_meret)
{
  int sz = 0;
  for (int i = 0; i < titkos_meret; ++i)
    if (titkos[i] == ' ')
      ++sz;

  return (double) titkos_meret / sz;
}

int
tiszta_lehet (const char *titkos, int titkos_meret)
{
  // a tiszta szoveg valszeg tartalmazza a gyakori magyar szavakat
  // illetve az átlagos szóhossz vizsgálatával csökkentjük a
  // potenciális töréseket

  double szohossz = atlagos_szohossz (titkos, titkos_meret);

  return szohossz > 5.0 && szohossz < 9.0
    && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
    && strcasestr (titkos, "az") && strcasestr (titkos, "ha");

}

void
exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
{

  int kulcs_index = 0;

  for (int i = 0; i < titkos_meret; ++i)
    {

      titkos[i] = titkos[i] ^ kulcs[kulcs_index];
      kulcs_index = (kulcs_index + 1) % kulcs_meret;

    }

}

int
exor_tores (const char kulcs[], int kulcs_meret, char titkos[],
	    int titkos_meret)
{

  exor (kulcs, kulcs_meret, titkos, titkos_meret);

  return tiszta_lehet (titkos, titkos_meret);

}

int
main (void)
{

  char kulcs[KULCS_MERET];
  char titkos[MAX_TITKOS];
  char *p = titkos;
  int olvasott_bajtok;

  // titkos fajt berantasa
  while ((olvasott_bajtok =
	  read (0, (void *) p,
		(p - titkos + OLVASAS_BUFFER <
		 MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
    p += olvasott_bajtok;

  // maradek hely nullazasa a titkos bufferben  
  for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
    titkos[p - titkos + i] = '\0';

  // osszes kulcs eloallitasa
  for (int ii = 'a'; ii <= 'z'; ++ii)
    for (int ji = 'a'; ji <= 'z'; ++ji)
      for (int ki = 'a'; ki <= 'z'; ++ki)
	for (int li = 'a'; li <= 'z'; ++li)
	  for (int mi = 'a'; mi <= 'z'; ++mi)
	   
		  {
		    kulcs[0] = ii;
		    kulcs[1] = ji;
		    kulcs[2] = ki;
		    kulcs[3] = li;
		    kulcs[4] = mi;
		  

		    if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
		      printf
			("Kulcs: [%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
			 ii, ji, ki, li, mi,  titkos);

		    // ujra EXOR-ozunk, igy nem kell egy masodik buffer  
		    exor (kulcs, KULCS_MERET, titkos, p - titkos);
		  }

  return 0;
}]]></programlisting>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/lovaszbotond/Caesar/blob/master/Exor%20titkos%C3%ADt%C3%B3%20t.c"></link>                
        </para>
        <para>
A korábban megírt 4.2-es feladatunkban  látott program titkosított szövegét hivatott feltörni.Először megcsináljuk a kötelező, feladat megoldásánál fő szempontot játszó függvényeket , melyek segítenek a feltörésben.Nézzük őket darabonként.
</para>
<para>
Az <function>atlagos_szohossz</function>-on belül láthatjuk a <function>const char *titkos</function>-t ami egy későbbiekben meg nem változtatható mutató.Beállítom hova mutasson a pointer és úgy is marad.
A <function>for</function> cikluson belül az "i" 0-tól indul egészen míg a <function>titkos_meret</function>-et el nem éri.Az <function>if</function>-en belül megszamoljuk a karaktereket szavankent.Ha space jelenséget észlel tehát az "i"-edik eleme szóköz akkor növeljük az "sz"-t.Ami a "titkos" fakkba fog menni. A returnel pedig szimplan atlagot szamolunk.Elosztjuk a <function>titkos_meret</function>-et az <function>sz</function> szóközök számával.
</para>
<para>
A <function>tiszta_lehet</function> függvény ahogy a komment szekcióban is írjuk a programon belül , a potenciális töréseket csökkenthetjük.Jelen esetben be is állítjuk, hogy az átlagos szóhossz 5 és 9 közés esik , a leggyakoribb magyar szavaink pedig , hogy - az - nem - ha , melyeket az <function>strcasestr</function> a <function>strstr()</function>-el ellentétben megvizsgálja ezeknek az előfordulását és rögzítik is azt." Tű a szénakazalban " ahogyan a manuál is írja.A lényege pedig , hogy a <function>szohossz</function>-ban tároljuk az <function>atlagos_szohossz</function> által kapott értékeket.
        </para>
<para>
A mainen belül , szintén olvashatjuk a kommenteket melyek segítenek a feladat megértésében. 
Megadjuk hogy jelen esetben a kulcsunk öt hosszú legyen , de lehetne harminc akár száz hosszú is.Egyébként a kulcs a-z-ig illetve 0-9-ig tartalmazhatja a karaktereket. Speciális karaktereket nem tartalmazhatna.A program sebességén tudunk növelni , viszont akkor át is kellene írnunk a forrásunkat. Egyenlőre ismerkedjünk ezzel a forrással, és a későbbiekben még találkozhatunk , ezen forrás továbbfejlesztett felgyorsított változatával.
</para>            
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
<para>
<programlisting language="R"><![CDATA[
library(neuralnet)

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)

or.data <- data.frame(a1, a2, OR)

nn.or <- neuralnet(OR~a1+a2, or.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.or)

compute(nn.or, or.data[,1:2])


a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
AND   <- c(0,0,0,1)

orand.data <- data.frame(a1, a2, OR, AND)

nn.orand <- neuralnet(OR+AND~a1+a2, orand.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.orand)

compute(nn.orand, orand.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=c(6, 4, 6), linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])
]]></programlisting>

</para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
        <para>
A neuron egy olyan agysejt, amelynek alapfeladata az elektromos jelek összegyűjtése, feldolgozása és szétterjesztése.Azt gondoljuk, hogy az agy információfeldolgozó kapacitása elsősorban ilyen neuronok hálózatából alakul ki.A korai MI néhány kutatása mesterséges neurális hálók létrehozására irányult.Elnagyolva az mondható, hogy a neuron akkor "tüzel”, amikor a bemeneti értékek súlyozott összege meghalad egy küszöböt.A neurális háló a tanuló rendszerek egyik leghatékonyabb és legnépszerűbb formája, ezért megéri külön tárgyalni.A neurális hálók irányított kapcsolatokkal összekötött csomópontokból vagy egységekből állnak. Az "i"-edik egységtől az "i"-edik felé vezető kapcsolat hivatott az aktivizációt terjeszteni. Minden egyes kapcsolat rendelkezik egy hozzá asszociált numerikus súllyal , ami meghatározza a kapcsolat egységét és előjelét.Minden egyes "i" egység először a bemeneteinek egy súlyozott összegét számítja ki.
A neurális hálózat bemeneti kapcsolatokból , függvényekból , aktivációs függvényekből , egy kimenetből és kimeneti kapcsolatokból áll.A kimenetét úgy kapja, hogy egy g aktivációs függvényt alkalmaz a kapott összegre.Később le is írjuk , mi is ez a függvény.
</para>
<para>
A feladat a neurális OR , AND , EXOR kapukat kéri tőlönk.Megfelelő bemeneti és eltolássúlyokkal rendelkező, küszöbaktivációjú egységek képesek logikai kapuként működni.Ez azért fontos, mert azt jelenti, hogy ezen egységek felhasználásával tetszőleges logikai függvény kiszámítására tudunk hálózatot építeni.
</para> 
<para>
A <function>library(neuralnet)</function>-es csomagot betöltjük a programunkba.Három részre bontva elmagyarazzuk/megtanítjuk , hogyan is alkalmazza a különböző bementeimet és hogy dolgozzon vele.
A logikai kapuk különböző logikai igaz/hamis kiemeneteket adnak mely az OR esetében :           
<programlisting>
0-0->0
0-1->1
1-0->1
1-1->1
</programlisting>
Az AND : 
<programlisting>
0-0->0
0-1->0
1-0->0
1-1->1
</programlisting>
Az EXOR pedig : 
<programlisting>
0-0->0
0-1->1
1-0->1
1-1->0
</programlisting>
Tehát ezt tanítjuk meg neki , hogy ezekkel a paraméterekkel dolgozzon.Az <function>or.data</function> sorunkban csinálunk belőle adatot.Átadjuk ezeket az adatokat a neurálnetnek.Szintén az <function>nn.orand</function> illetve az <function>nn.exor</function>sorokban is ezt tesszük meg. 
Az OR és az AND esetében kiválóan működik a programunk.Miután megattuk neki a paramétereket a neurális háló elkezdi saját magát tanítani.Beállítja a megfelelő súlyokat amivel dolgozni fog és amikor azok kijönnek , akkor a tanítás befejeződik.
A <function>compute</function> paranccsal beadjuk neki hogy ellenőrizze le magát és látjuk , hogy az eredményben a táblázatokhoz megfelelően egy nagyon közeli értéket kapunk, amiből már tudjuk , hogy helyes a megoldás és a művelet eredménye.Az EXOR esetében a súlyozás nem megfelelő nagyjából mindenött 0.5-ös eredményt kapunk pedig ahogy szemléltettük '0,1,1,0' a végkifejlett.Így hát megoldásnak azt választjuk , hogy a <function>hidden</function> azaz rejtett neuronokat nem 0-val hanem például 2-vel vagy programunk esetében egy kis sorozattal tesszül egyenlővé <function>hidden=c(6,4,6)</function>.Így azért is fog működni , mert rájöttünk , hogy a többrétegű hálózatokat lehet jól tanítani.A következő ábra  amit szemléltetni fogok a program egy lehetséges megvalósulása lesz és remélem segít megérteni mégjobban , hogyan is működik a folyamat.A plot fügvénnyel a program végén egy hasonló ábrát rajzoltatunk ki, az adatok függvényében.
<mediaobject>
			<imageobject>
				<imagedata fileref="./images/neural.png" scale="45"/> 
			</imageobject>
		</mediaobject>           
</para>
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/lovaszbotond/KONYVALL/blob/master/perceptron.hpp"></link>(perceptron.hpp forrása)               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
        

</chapter>                
