<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/10/10/myrmecologist">https://bhaxor.blog.hu/2018/10/10/myrmecologist</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
<programlisting language="c"><![CDATA[
import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.ImageObserver;
import java.text.AttributedCharacterIterator;
import java.util.ArrayList;
import java.awt.Event;

public class game_of_life extends JFrame {
    RenderArea ra;
    private int i;
    
    public game_of_life() {
        super("Game of Life");
        this.setSize(1005, 1030);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setVisible(true);
        this.setResizable(false);
        ra = new RenderArea();
        ra.setFocusable(true);
        ra.grabFocus();
        add(ra);

        ra.edit_mode = true;
        ra.running = true;
    }

    public void update() {
        ArrayList<ArrayList<Boolean>> entities = new ArrayList<ArrayList<Boolean>>();// = ra.entities;
        int size1 = ra.entities.size();
        int size2 = ra.entities.get(0).size();
        for(int i=0;i<size1;i++)
        {
            entities.add( new ArrayList<Boolean>());
            for(int j=0;j<size2;j++)
            {
                int alive = 0;
                
                if(ra.entities.get((size1+i-1)%size1).get((size2+j-1)%size2)) alive++;
                if(ra.entities.get((size1+i-1)%size1).get((size2+j)%size2)) alive++;
                if(ra.entities.get((size1+i-1)%size1).get((size2+j+1)%size2)) alive++;

                if(ra.entities.get((size1+i)%size1).get((size2+j-1)%size2)) alive++;
                if(ra.entities.get((size1+i)%size1).get((size2+j+1)%size2)) alive++;

                if(ra.entities.get((size1+i+1)%size1).get((size2+j-1)%size2)) alive++;
                if(ra.entities.get((size1+i+1)%size1).get((size2+j)%size2)) alive++;
                if(ra.entities.get((size1+i+1)%size1).get((size2+j+1)%size2)) alive++;
                


                /*for(int k=-1;i<2;k++)
                {
                    for(int l = -1; l < 2 ;l++)
                    {
                        if(!(k==0 && l == 0))
                        {
                            if(ra.entities.get((size1+i+k)%size1).get((size2+j+l)%size2)) alive++;
                        }
                    }
                }*/

                if(ra.entities.get(i).get(j))
                {
                    if(alive < 2 || alive > 3)
                    {
                        //ra.entities.get(i).set(j,false);
                        entities.get(i).add(false);
                    }
                    else
                    {
                        entities.get(i).add(true);
                    }
                }
                else
                {
                    if(alive == 3)
                    {
                        //ra.entities.get(i).set(j,true);
                        entities.get(i).add(true);
                    }
                    else
                    {
                        entities.get(i).add(false);
                    }
                }

            }
        }
        ra.entities = entities;

    }

    class RenderArea extends JPanel implements KeyListener {
        public ArrayList<ArrayList<Boolean>> entities;

        public int diff;
        public boolean edit_mode;
        public boolean running;
        public RenderArea() {
            super();
            setSize(1000, 1000);
            setVisible(true);
            setBackground(Color.WHITE);
            setForeground(Color.BLACK);
            setLocation(0, 0);

            diff = 20;
            

            this.addMouseListener((MouseListener) new MouseListener(){
            
                @Override
                public void mouseReleased(MouseEvent arg0) {
                    
                }
            
                @Override
                public void mousePressed(MouseEvent arg0) {
                    clicked(arg0);
                }
            
                @Override
                public void mouseExited(MouseEvent arg0) {
                    
                }
            
                @Override
                public void mouseEntered(MouseEvent arg0) {
                    
                }
            
                @Override
                public void mouseClicked(MouseEvent arg0) {
                    
                }
            }); 
            this.addKeyListener(this);
            entities = new ArrayList<ArrayList<Boolean>>();
            for(int i=0;i<1000/diff;i++)
            {
                entities.add(new ArrayList<Boolean>());
                for(int j=0;j<1000/diff;j++)
                {
                    entities.get(i).add(false);
                }
            }
            
        }

        void clicked(MouseEvent arg0)
        {
            System.out.println("Button "+(arg0.getButton()== 1 ? "Left" : "Right"));
            System.out.println("X:"+arg0.getX()/diff);
            System.out.println("Y:"+arg0.getY()/diff);
            if(edit_mode)
            {
                entities.get(arg0.getX()/diff).set(arg0.getY()/diff,!entities.get(arg0.getX()/diff).get((arg0.getY()/diff)));
                this.update(this.getGraphics());
            }
            
        }


        @Override
        public void keyTyped(KeyEvent e) {
            //System.out.println(e.getKeyChar());
        }
    
        @Override
        public void keyReleased(KeyEvent e) {
            System.out.println("Key pressed:"+e.getKeyChar());
            if(e.getKeyChar()=='e')
            {
                edit_mode = !edit_mode;
            }
            else if(e.getKeyChar()=='q')
            {
                this.running = false;
            }
            else if(e.getKeyChar()=='c')
            {
                if(edit_mode)
                {
                    for(int i=0;i<this.entities.size();i++)
                    {
                        for(int j=0;j<this.entities.get(1).size();j++)
                        {
                            this.entities.get(i).set(j,false);
                        }
                    }
                    this.update(this.getGraphics());
                }
                
            }

        }
    
        @Override
        public void keyPressed(KeyEvent e) {
            //System.out.println(e.getKeyChar());
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.clearRect(0, 0, 1000, 1000);
            for(int i=0;i<1000;i+=diff)
            {
                g.drawLine(i, 0, i, 1000);
            }
            for(int j=0;j<1000;j+=diff)
            {
                g.drawLine(0, j, 1000, j);
            }
            for(int i=0;i<1000;i+=diff)
            {
                for(int j=0;j<1000;j+=diff)
                {
                    if(entities.get(i/diff).get(j/diff))
                    {
                        g.setColor(Color.BLACK);
                    
                    }
                    else
                    {
                        g.setColor(Color.WHITE);
                    }
                    
                    g.fillRect(i+2, j+2, diff-3, diff-3);
                }
            }
        }

        

        private static final long serialVersionUID = 1L;
        
    }

    private static final long serialVersionUID = 1L;
    public static void main(String args[])
    {
        game_of_life gol = new game_of_life();
        while(gol.ra.running)
        {
            if(!gol.ra.edit_mode)gol.update();
            try{Thread.sleep(200);}
            catch(Exception ex)
            {

            }
            gol.ra.update(gol.ra.getGraphics());
        }
        gol.dispose();
    }
}]]></programlisting>
        <para>
        Olyan mint a 7.3-as csak
        </para>            
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
<programlisting language="c"><![CDATA[
#include <SFML/System.hpp>
#include <SFML/Graphics.hpp>

#include <vector>
#include <iostream>
using namespace sf;
using std::vector;
using std::cout;
using std::endl;


class Grid
{
public:
    Grid(unsigned int x = 1000, unsigned int y = 1000, unsigned int diffs = 50) : w(x),h(y),diff(diffs)
    {
        
    }

    void draw(RenderWindow & window)
    {
        for(int i=0;i<w;i+=diff)
        {   
            Vertex line[] =
            {
                sf::Vertex(sf::Vector2f(i,0)),
                sf::Vertex(sf::Vector2f(i, h))
            };
            line[0].color = Color(0,0,0);
            line[1].color = Color(0,0,0);
            window.draw(line, 2, sf::Lines);
        }
        for(int i=0;i<h;i+=diff)
        {   
            Vertex line[] =
            {
                sf::Vertex(sf::Vector2f(0,i)),
                sf::Vertex(sf::Vector2f(w,i))
            };
            line[0].color = Color(0,0,0);
            line[1].color = Color(0,0,0);

            window.draw(line, 2, sf::Lines);
        }
    }

    unsigned int w;
    unsigned int h;
    unsigned int diff;
};

class Square
{
public:
    Square()
    {

    }
    Square(int x_pos, int y_pos, float w, bool alive = false)
    {
        square = new RectangleShape(Vector2f(w,w));
        square->setPosition(Vector2f(x_pos,y_pos));
        aliveState = alive;
    }
    /*Square (const Square& other )
    {
        if(this != &other)
        {
            delete this->square;
            this->square = other.square;
        }
    }
    Square& operator=(const Square& other)
    {
        if(this != &other)
        {
            delete this->square;
            this->square = other.square;
        }
        return *this;
    }*/
    ~Square()
    {
        delete square;
    }

    void update()
    {
        if(aliveState)
        {
            square->setFillColor(Color::Black);
        }
        else
        {
            square->setFillColor(Color::White);
        }
        
    }

    void setFill(Color c = Color::White)
    {
        square->setFillColor(c);
    }

    void draw(RenderWindow &window)
    {
        window.draw(*square);
    }
    RectangleShape* square;

    bool aliveState;
private:
    
};

vector<vector<Square*>> update(vector<vector<Square*>> v)
{
    vector<vector<Square*>> tmp ;//= v;

    for(int i=0;i<v.size();i++)
    {
        tmp.push_back(vector<Square*>());
        for(int j=0;j<v[0].size();j++)
        {
            tmp[i].push_back(new Square(v[i][j]->square->getPosition().x,v[i][j]->square->getPosition().y,v[i][j]->square->getSize().x,v[i][j]->aliveState));
        }
    }

    for(int i=0;i<v.size();i++)
    {
        for(int j=0;j<v[0].size();j++)
        {
            int live_neighbours = 0;
            live_neighbours +=  v[(i-1)%v.size()][(j-1)%v[0].size()]->aliveState;
            live_neighbours +=  v[(i-1)%v.size()][(j)%v[0].size()]->aliveState;
            live_neighbours +=  v[(i-1)%v.size()][(j+1)%v[0].size()]->aliveState;

            live_neighbours +=  v[(i)%v.size()][(j-1)%v[0].size()]->aliveState;
            live_neighbours +=  v[(i)%v.size()][(j+1)%v[0].size()]->aliveState;

            live_neighbours +=  v[(i+1)%v.size()][(j-1)%v[0].size()]->aliveState;
            live_neighbours +=  v[(i+1)%v.size()][(j)%v[0].size()]->aliveState;
            live_neighbours +=  v[(i+1)%v.size()][(j+1)%v[0].size()]->aliveState;
            //cout <<" X:"<<i << " y:"<< j << " Live neighbours:"<< live_neighbours<<endl;
            if(v[i][j]->aliveState)
            {
                if(live_neighbours < 2)
                {
                    tmp[i][j]->aliveState = false;
                }
                else if(live_neighbours > 3)
                {
                    tmp[i][j]->aliveState = false;
                }
            }
            else
            {
                if(live_neighbours == 3)
                {
                    tmp[i][j]->aliveState = true;
                }
            }
        }
    }

    return tmp;
}


void killall(vector<vector<Square*>> &v)
{
    for(int i=0;i<v.size();i++)
    {
        for(int j=0;j<v[0].size();j++)
        {
            v[i][j]->aliveState=false;
        }
    }
}

int main()
{
    RenderWindow window(VideoMode(1000,1000),"Game of Life");
    window.setFramerateLimit(10);
    window.setActive();
    
    Vector2u size = window.getSize();

    Grid g(size.x,size.y,1000/40);
    
    
    int h = g.h/g.diff+1;
    int w = g.w/g.diff+1;
    //Square squares[h][w];

    std::vector<std::vector<Square*>> squares;

    bool edit_mode = true;


    for(int i=0;i<h;i++)
    {
        squares.push_back(vector<Square*>());
        for(int j=0;j<w;j++)
        {
            squares[i].push_back(new Square(i*g.diff+1,j*g.diff+2,g.diff-3));
        }
    }
    //squares[4][5]->aliveState=true;


    while (window.isOpen())
    {
        window.clear(sf::Color::White);
        // check all the window's events that were triggered since the last iteration of the loop
        sf::Event event;
        while (window.pollEvent(event))
        {
            // "close requested" event: we close the window
            if (event.type == sf::Event::Closed)
            {
                window.close();
            }
            else if(event.type == Event::MouseButtonPressed)
            {
                if(edit_mode && event.mouseButton.button == Mouse::Button::Left)
                {
                    /*cout<<event.mouseButton.x<<" "<<event.mouseButton.y<<endl;
                    cout<<event.mouseButton.x/g.diff<< " "<< event.mouseButton.y/g.diff<<endl;*/
                    squares[event.mouseButton.x/g.diff][event.mouseButton.y/g.diff]->aliveState= !squares[event.mouseButton.x/g.diff][event.mouseButton.y/g.diff]->aliveState;
                    cout<< "Changed state on entity at X:"<< event.mouseButton.x/g.diff << " Y:"<<event.mouseButton.y/g.diff << " to "<< (squares[event.mouseButton.x/g.diff][event.mouseButton.y/g.diff]->aliveState? "Alive" : "Dead")<<endl;
                }
            }
            else if(event.type == Event::KeyPressed)
            {
                if(event.key.code == Keyboard::Q)
                {
                    cout<<"Close request recieved. Application will exit."<<endl;
                    window.close();
                }
                if(edit_mode && event.key.code == Keyboard::C)
                {
                    cout<< "Killed all entities." <<endl;
                    killall(squares);
                }
                if(event.key.code == Keyboard::E)
                {
                    edit_mode = !edit_mode;
                    if(edit_mode)
                    {
                        cout<< "Changed to edit mode."<<endl;
                    }
                    else
                    {
                        cout<< "Changed to simulation mode."<<endl;
                    }
                    
                }
            }
            
                
        }

        /*s.draw(window);
        s.square->setPosition(Vector2f(s.square->getPosition().x+1,s.square->getPosition().y));*/
        g.draw(window);

        for(int i=0;i<h;i++)
        {
            for( int j=0; j<w;j++)
            {
                squares[i][j]->draw(window);
            }
        }

        window.display();
        if(!edit_mode) squares = update(squares);
        for(int i=0;i<h;i++)
        {
            for( int j=0; j<w;j++)
            {
                squares[i][j]->update();
            }
        }
    }
     
    return EXIT_SUCCESS;
}]]></programlisting>
        <para>
            Az életjátékot John Conway matematikus találta ki. Ez egy "nullszemélyes" játék és a játékos szerepe mindössze annyi , hogy megad egy kezdőalakzatot ,és azután csak figyeli a ez eredményt.Matematikailag ez az úgynevezett sejtatomaták közé tartozik. Bővebb információt a matematikai hátteret illetőn és a szabályokat illetően az alábbi linken lehet találni: <link xlink:href="https://hu.wikipedia.org/wiki/%C3%89letj%C3%A1t%C3%A9k"></link> 
        </para>    
<para>
Mint ahogyan a cikkben is olvashatjuk vannak alapvető szabályok amik a program alapját fogják képezni : 
</para>        
<para>
Első : A sejt túléli a kört, ha két vagy három szomszédja van.
</para>
<para>
Második : A sejt elpusztul ,  ha kettőnél kevesebb , vagy háromnál több szomszédja van.
</para>
<para>
Harmadik : Az új sejt megszületik  minden olyan cellűban , melynek környezetében pontosan három sejt található.
</para><para>
Ezek tehát az alappilléreink amikkel dolgoznunk kell, és akkor nézzük is meg , hogyan épül fel a programunk.
</para>
<para>
A programunk lefordítása a következőképp történik: "g++ *.cpp -o sfml-app -lsfml-graphics lsfml-window -lsfml.system". Amikor már a programunk fut , az esetben kézzel kell rajzolnunk egy alakzatot , majd nyomni egy "e" betűt , aminek következtében a program elkezdi az "életjátékot".
</para>
<para>
A feladat megoldásához a programban kettő osztályt és három függvényt használunk. 
</para>
<para>
Az első osztályunk a "Grid" elnevezést kapta , mely angolul a háló, és ebből következtethetjük is , hogy ezen osztály public részében találjuk meg , hogyan is állítjuk be a program kezdetekor az ablakunknak a lefixált méretét.Amint ez az ablak elkészül, a <function>void draw</function> függvényünk segítségével jelenítjük meg az ablakot.Maga a megjelenített ablakunk négyzetrácsos lesz.
</para>
<para>
A második osztályunk a "Square" ami azért van , hogy ha rákattintunk a négyzetre magán a rácshálón belül, akkor azt a rácsot kitöltse fekete színnel.Lényegében itt őrizzük meg a sejtek adott állapotainak(élő vagy halott)státuszait illetve pozíciójukról kapink még információt.
</para>
<para>
Ezeket a négyzeteket a későbbiekben nekünk folyton frissítenünk kell melyhez a "Squar"-en belül a <function>update</function>fog segíteni.Jelen "update" amely szabályokat leírtunk korábban felhasználva megvizsgálja a négyzeteket/sejteket.( Első , Második , Harmadik )  
</para>
<para>
A harmadik nagyobb részünk a "vector"  amely vektorral mozgatjuk a kijelölt négyzeteket a megfelelő játékszabályokat alkalmazva. 
<programlisting language="c"><![CDATA[
for(int i=0;i<v.size();i++)
    {
        for(int j=0;j<v[0].size();j++)
        {
            int live_neighbours = 0;
            live_neighbours +=  v[(i-1)%v.size()][(j-1)%v[0].size()]->aliveState;
            live_neighbours +=  v[(i-1)%v.size()][(j)%v[0].size()]->aliveState;
            live_neighbours +=  v[(i-1)%v.size()][(j+1)%v[0].size()]->aliveState;

            live_neighbours +=  v[(i)%v.size()][(j-1)%v[0].size()]->aliveState;
            live_neighbours +=  v[(i)%v.size()][(j+1)%v[0].size()]->aliveState;

            live_neighbours +=  v[(i+1)%v.size()][(j-1)%v[0].size()]->aliveState;
            live_neighbours +=  v[(i+1)%v.size()][(j)%v[0].size()]->aliveState;
            live_neighbours +=  v[(i+1)%v.size()][(j+1)%v[0].size()]->aliveState;
            //cout <<" X:"<<i << " y:"<< j << " Live neighbours:"<< live_neighbours<<endl;
            if(v[i][j]->aliveState)
            {
                if(live_neighbours < 2)
                {
                    tmp[i][j]->aliveState = false;
                }
                else if(live_neighbours > 3)
                {
                    tmp[i][j]->aliveState = false;
                }
            }
            else
            {
                if(live_neighbours == 3)
                {
                    tmp[i][j]->aliveState = true;
                }
            }
        }
    }

    return tmp;
}
]]>
</programlisting>
</para>
<para>
A negyedik része a programunknak a <function>void killall</function> egyfajta kényelmi funkció a "játékos" számára ha nem szeretne mindig kilépni az új szimuláció érdekében.Kivégezzük az összes sejtet.
</para>
<para>
Az ötödik és utolsó részünk a <function>main</function> ahol az ablakunk paramétereit megadjuk.Jelenleg 1000x1000 és a "Game of Life" feliratot kapja.
A framrate(fps)10 , azaz a megjelenítésnek a sebessége.
</para>
<para>
A <function>push back</function> segítségével hozzáadunk egy elemet a vektorhoz.A <function>for</function> 
</para>
<para>
A <function>while</function> cikluson belül első lépésként letöröljük a képernyőt, így egy teljesen tiszta ablakot kapva.Ez azért fontos , hogy az újraindult játékunk ne firkálja össze az előzőeket.a belső <function>while</function> cikluson belül pedig vizsgáluk a rendszert történik e valamilyen esemény , tehát lenyomnak e valamit vagy nem . Tehát "Q" esetében bezáródik a program. "C" esetében killeli a sejteket , tehát az összes négyzetet.Az "E" segítségével a szerkesztő módban találjuk magunkat.Ha bal egérgombbal kattintunk , akkor kiszínezi a négyzetet.(feketére) Ezen tevékenységekhez a szerkesztő módon belül kell hogy legyünk.
</para>
<para>
A programunk végén meghívjuk a "draw" illetve "update" függvényünket , amivel kirajzoljuk a szerkesztő módban beállított új játékunkat ( élő/halott sejteket ) és frissítjük a programot.
</para>
<para>
A feladat megoldásához sokat segített és mentorált Petrus József Tamás.
</para>
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        

</chapter>                
