<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chaitin!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Iteratív és rekurzív faktoriális Lisp-ben</title>
        <para>
                
        </para>
        <para>
            Megoldás videó:<link xlink:href="https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv?token=876f1f13f43694cccab0410d164f21b8"></link>
        </para>
        <para>
            Megoldás forrása:                
        </para>
<para>
A lisp programnyelv általános célú programnyelvnek tervezték, még annó az 50-es években , viszont később rájöttek , hogy a mesterséges inteligencia területén kiválóan helyt áll, és különféle kutatásokban előszeretettel használt nyelvvé vált.Napjainkban is sok felhasználási területen használják a lisp nyelvet.Többek között a számításelmélet oktatásában is előfordul.Alapvetően lista feldolgozását jelenti a neve.Az alapvető adatstruktúrája a lispnek a láncolt tömb/lista.E programnyelv szintaktikája a többihez képest , nagyon primitív és lebutított.
</para>
<para>
<programlisting>
<![CDATA[
(defun fact(x)
(setq sum 1)
(loop while (> x 1)
    do (
        setq sum (* sum x)
        x (- x 1)
        )
    )
    sum
)

(setq f (read))

(format t "~D! ~D" f (fact f))]]>
</programlisting>
Ennek megfelelően a lisp szabályait követve az alábbi megoldásra jutottam magyarázat terén.Kezdjük is az iteratív megoldással.Először megadjuk a programunknak , azaz definiáljuk a "fact" nevű függvényt amely a matematikai faktoriális számolásáról fog gondoskodni.<function>(defun fact(x))</function>.A <function> setq sum 1</function> alapvetően bekér egy számot aa felhasználótól.Ez a számunk lesz aminek később meghatározzuk a matematikai műveletét azaz a faktoriálisát.A <function>loop while</function> ciklusban található maga a számítás ahol addig megy az x amíg nem nagyobb mint 1.Szimpla matematika.
A <function>setq f (read)</function>lesz majd a függvány neve.A <function>format t</function> olyan mint a printf.Legvégén meghívjuk magát a <function>fact</function> függvényt.   
</para>
<para>
A második esetben a Rekurzív megoldást fogjuk alkalmazni:
</para>
<programlisting>
<![CDATA[
(defun factorial(x)
    (if (= x 1)
        (setq a 1)
    )
    (if (> x 1)
        (setq a (* x (factorial (- x 1))))
    )
    
    a
)

(format t "~D! is ~D" 7 (factorial 7))]]>
</programlisting>
<para>
Szintén az előzőhöz hasonlóan definiáljuk a <function>factorial</function> nevű függvényünket. Ha ez megvan akkor a függvény rekurzív módon fogja kiszámolni a faktoriális értékét.Láthatjuk hogy van két darab <function>if</function>- melyekben a matematikai számításokat látjuk. Az "a"-nak értéket adunk.A programunk végén pedig meghívjuk a <function>factorial</function> függvényt , adott esetben az 7-es számra.
</para>
    </section>        
    <section>
        <title>Gimp Scheme Script-fu: króm effekt</title>
        <para>
            Írj olyan script-fu kiterjesztést a GIMP programhoz, amely megvalósítja a króm effektet egy 
            bemenő szövegre!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/OKdAkI_c7Sc">https://youtu.be/OKdAkI_c7Sc</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Chrome">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Chrome</link>               
        </para>
        <para>
   <programlisting>
<![CDATA[(define (color-curve)
(let* (
    (tomb (cons-array 8 'byte))
)
    (aset tomb 0 0)
    (aset tomb 1 0)
    (aset tomb 2 50)
    (aset tomb 3 190)
    (aset tomb 4 110)
    (aset tomb 5 20)
    (aset tomb 6 200)
    (aset tomb 7 190)
tomb)    
)

;(color-curve)

(define (elem x lista)

    (if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )

)

(define (text-wh text font fontsize)
(let*
    (
        (text-width 1)
        (text-height 1)
    )
 
    (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    (set! text-height (elem 2  (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    
    (list text-width text-height)
    )
)

;(text-width "alma" "Sans" 100)

(define (script-fu-bhax-chrome text font fontsize width height color gradient)
(let*
    (
        (image (car (gimp-image-new width height 0)))
        (layer (car (gimp-layer-new image width height RGB-IMAGE "bg" 100  LAYER-MODE-NORMAL-LEGACY)))
        (textfs)
        (text-width (car (text-wh text font fontsize)))
        (text-height (elem 2 (text-wh text font fontsize)))
        (layer2)        
    )
    
    ;step 1
    (gimp-image-insert-layer image layer 0 0)
    (gimp-context-set-foreground '(0 0 0)) // a ' miatt nem lesz függvény, szabadnak tekinti a lips
    (gimp-drawable-fill layer  FILL-FOREGROUND )
    (gimp-context-set-foreground '(255 255 255))
   
    (set! textfs (car (gimp-text-layer-new image text font fontsize PIXELS)))
    (gimp-image-insert-layer image textfs 0 0)   
    (gimp-layer-set-offsets textfs (- (/ width 2) (/ text-width 2)) (- (/ height 2) (/ text-height 2)))
   
    (set! layer (car(gimp-image-merge-down image textfs CLIP-TO-BOTTOM-LAYER))) 
   
    ;step 2   
    (plug-in-gauss-iir RUN-INTERACTIVE image layer 15 TRUE TRUE)
   
    ;step 3
    (gimp-drawable-levels layer HISTOGRAM-VALUE .11 .42 TRUE 1 0 1 TRUE)
   
    ;step 4   
    (plug-in-gauss-iir RUN-INTERACTIVE image layer 2 TRUE TRUE)

    ;step 5    
    (gimp-image-select-color image CHANNEL-OP-REPLACE layer '(0 0 0))
    (gimp-selection-invert image)

    ;step 6        
    (set! layer2 (car (gimp-layer-new image width height RGB-IMAGE "2" 100 LAYER-MODE-NORMAL-LEGACY)))
    (gimp-image-insert-layer image layer2 0 0)

    ;step 7        
    (gimp-context-set-gradient gradient) 
    (gimp-edit-blend layer2 BLEND-CUSTOM LAYER-MODE-NORMAL-LEGACY GRADIENT-LINEAR 100 0 REPEAT-NONE 
        FALSE TRUE 5 .1 TRUE width (/ height 3) width  (- height (/ height 3)))
    
    ;step 8        
    (plug-in-bump-map RUN-NONINTERACTIVE image layer2 layer 120 25 7 5 5 0 0 TRUE FALSE 2)
   
    ;step 9       
    (gimp-curves-spline layer2 HISTOGRAM-VALUE 8 (color-curve))
      
    (gimp-display-new image)
    (gimp-image-clean-all image)
    )
)

;(script-fu-bhax-chrome "Bátf41 Haxor" "Sans" 120 1000 1000 '(255 0 0) "Crown molding")

(script-fu-register "script-fu-bhax-chrome"
    "Chrome3"
    "Creates a chrome effect on a given text."
    "Norbert Bátfai"
    "Copyright 2019, Norbert Bátfai"
    "January 19, 2019"
    ""
    SF-STRING       "Text"      "Bátf41 Haxor"
    SF-FONT         "Font"      "Sans"
    SF-ADJUSTMENT   "Font size" '(100 1 1000 1 10 0 1)
    SF-VALUE        "Width"     "1000"
    SF-VALUE        "Height"    "1000"
    SF-COLOR        "Color"     '(255 0 0)
    SF-GRADIENT     "Gradient"  "Crown molding"    
)
(script-fu-menu-register "script-fu-bhax-chrome" 
    "<Image>/File/Create/BHAX"
)]]>
</programlisting>
A Script-Fu a Scheme nevű tolmácsolási nyelven alapul , és a lekérdezési funkciók használatával működik a GIMP adatbázison belül.A Script-Fu segítségével mindenfélét csinálhatunk/megtehetünk.Automatuzálni kell a saját beállításainkhoz megfelelően.
        </para>    
<para>
Programunk első felében definiáljuk <function>define</function> a méretet , betű típust , színeket , illetve a betűméretet. A második felében azaz az utolsó <function>define</function>-ban megalkotjuk magát a képet <function>image</function> illetve a réteget is <function>layer</function>. Ezek változük tehát eltudjuk benne tárolni a létrehozott képünknek a tulajdonságait mint például : (szín,szélesség,magasság).
A szöveg méretével zárjuk sorunkat.Ezek után írhatjuk a folyamatot/lépéseket <function>step</function>, hogy miként is kell megkreálnunk Lisp nyelven a Króm effektet.
</para>
<para>
Lépéseket szémozással sorrendben fogom jelölni. 
</para>
<para>
1 - : Kreálunk egy fehér hátteret <function>fimp-context-set-foreground '(0 0 0))</function>, ezután kiszínezzük fekete színnel , <function>FILL-FOREGROUND</function>maga a kitöltés a fekete szín pedig a <function>gimp-set-foreground '(255 255 255))</function> amelyek az RGB-nek felelnek meg lényegében.Ezen hátteren fogunk dolgozni a későbbiekben.Írunk rá egy szöveget fehér színnel <function>set! textfs</function>, amit középre helyezünk <function>offsets textfs</function>.A végén mergeljük-összeillesztjük a képünket <function>gimp-image-merge</function>, és a réteget is összepasszintjuk <function>set! layer</function> 
</para>
<para>
2 - : Készítünk egy GAUSS <function>gauss-iir</function> elmosást az elkészített képünkre.
</para>
<para>
3 - : Alső felső határokat megcsináljuk/beállítjuk , hogy a képünk élesebb legyen és jobban kivehető.
</para>
<para>
4 - : Mint a második esetben GAUSS elmosás.
</para>
<para>
5 - : Színek szerint csináljuk különféleképpen a kijelölést <function>set-color</function> felhasználva kijelöjük a fekete partíciót, majd invertáljuk <function>selection-invert</function>. Ennek köszönhetően a végén a feliratunk köré kapunk keretet. 
</para>
<para>
6 - : Létrehozunk egy áttetsző réteget <function>layer-new-image</function>. Ez lesz az alapvető-fő rétegünk a kép esetében
</para>
<para>
7 - : Megállapítjuk a gradienst <function>set-gradient gradient</function>, és itt egy szürke színátmenetet fogunk kapni.Ezeket az egér használatán keresztül kattolással is megtudjuk oldani.(ezt szintén beállítottuk az utolsó sorban)
</para>
<para>
8 - : Térhatást generálunk <function>RUN-MONINTERACTIVE</function>.Létezik paramétere amelyek a <function>layer *-számok a programunkban</function> 120-25-7....
</para>
<para>
9 - : Ebben egy görbét felhasználva tudjuk setupolni , a fémességét <function>curves-spline</function>.Ebben a lépésben a kód eleji színekkel dolgozunk ezeket hívjuk meg mint <function>color-curve</function> függvény. A <function>define</function>-ban pedig megadjuk a fémességünknek a színét, melyeket a számok jelölnek.
</para>
<para>
Léphetünk is a mandalára , a program elkészült és a forrásának megértésében a tanár úr segített a videó kapcsán.
</para>
    </section>        

    <section>
        <title>Gimp Scheme Script-fu: név mandala</title>
        <para>
            Írj olyan script-fu kiterjesztést a GIMP programhoz, amely név-mandalát készít a
            bemenő szövegből!               
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv">https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Mandala">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Mandala</link>               
        </para>
        <para>
            <programlisting>
<![CDATA[
(define (elem x lista)

(if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )

)

(define (text-width text font fontsize)
(let*
    (
        (text-width 1)
    )
    (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    

    text-width
    )
)

(define (text-wh text font fontsize)
(let*
    (
        (text-width 1)
        (text-height 1)
    )
    ;;;
    (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    ;;; ved ki a lista 2. elemét
    (set! text-height (elem 2  (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    ;;;    
    
    (list text-width text-height)
    )
)


;(text-width "alma" "Sans" 100)

(define (script-fu-bhax-mandala text text2 font fontsize width height color gradient)
(let*
    (
        (image (car (gimp-image-new width height 0)))
        (layer (car (gimp-layer-new image width height RGB-IMAGE "bg" 100 LAYER-MODE-NORMAL-LEGACY)))
        (textfs)
        (text-layer)
        (text-width (text-width text font fontsize))
        ;;;
        (text2-width (car (text-wh text2 font fontsize)))
        (text2-height (elem 2 (text-wh text2 font fontsize)))
        ;;;
        (textfs-width)
        (textfs-height)
        (gradient-layer)
    )

    (gimp-image-insert-layer image layer 0 0)

    (gimp-context-set-foreground '(0 255 0))
    (gimp-drawable-fill layer FILL-FOREGROUND)
    (gimp-image-undo-disable image) 

    (gimp-context-set-foreground color)

    (set! textfs (car (gimp-text-layer-new image text font fontsize PIXELS)))
    (gimp-image-insert-layer image textfs 0 -1)
    (gimp-layer-set-offsets textfs (- (/ width 2) (/ text-width 2))  (/ height 2))
    (gimp-layer-resize-to-image-size textfs)

    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate-simple text-layer ROTATE-180 TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))

    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate text-layer (/ *pi* 2) TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))

    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate text-layer (/ *pi* 4) TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))
    
    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate text-layer (/ *pi* 6) TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))    
    
    (plug-in-autocrop-layer RUN-NONINTERACTIVE image textfs)
    (set! textfs-width (+ (car(gimp-drawable-width textfs)) 100))
    (set! textfs-height (+ (car(gimp-drawable-height textfs)) 100))
        
    (gimp-layer-resize-to-image-size textfs)
    
    (gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
        (- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
    (plug-in-sel2path RUN-NONINTERACTIVE image textfs)
        
    (gimp-context-set-brush-size 22)
    (gimp-edit-stroke textfs)
    
    (set! textfs-width (- textfs-width 70))
    (set! textfs-height (- textfs-height 70))
    
    (gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
        (- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
    (plug-in-sel2path RUN-NONINTERACTIVE image textfs)
        
    (gimp-context-set-brush-size 8)
    (gimp-edit-stroke textfs)
        
    (set! gradient-layer (car (gimp-layer-new image width height RGB-IMAGE "gradient" 100 LAYER-MODE-NORMAL-LEGACY)))
    
    (gimp-image-insert-layer image gradient-layer 0 -1)
    (gimp-image-select-item image CHANNEL-OP-REPLACE textfs)
    (gimp-context-set-gradient gradient) 
    (gimp-edit-blend gradient-layer BLEND-CUSTOM LAYER-MODE-NORMAL-LEGACY GRADIENT-RADIAL 100 0 
    REPEAT-TRIANGULAR FALSE TRUE 5 .1 TRUE (/ width 2) (/ height 2) (+ (+ (/ width 2) (/ textfs-width 2)) 8) (/ height 2))
    
    (plug-in-sel2path RUN-NONINTERACTIVE image textfs)

    (set! textfs (car (gimp-text-layer-new image text2 font fontsize PIXELS)))
    (gimp-image-insert-layer image textfs 0 -1)
    (gimp-message (number->string text2-height))
    (gimp-layer-set-offsets textfs (- (/ width 2) (/ text2-width 2)) (- (/ height 2) (/ text2-height 2)))
        
    ;(gimp-selection-none image)
    ;(gimp-image-flatten image)
    
    (gimp-display-new image)
    (gimp-image-clean-all image)
    )
)

;(script-fu-bhax-mandala "Bátfai Norbert" "BHAX" "Ruge Boogie" 120 1920 1080 '(255 0 0) "Shadows 3")

(script-fu-register "script-fu-bhax-mandala"
    "Mandala9"
    "Creates a mandala from a text box."
    "Norbert Bátfai"
    "Copyright 2019, Norbert Bátfai"
    "January 9, 2019"
    ""
    SF-STRING       "Text"      "Bátf41 Haxor"
    SF-STRING       "Text2"     "BHAX"
    SF-FONT         "Font"      "Sans"
    SF-ADJUSTMENT   "Font size" '(100 1 1000 1 10 0 1)
    SF-VALUE        "Width"     "1000"
    SF-VALUE        "Height"    "1000"
    SF-COLOR        "Color"     '(255 0 0)
    SF-GRADIENT     "Gradient"  "Deep Sea"
)
(script-fu-menu-register "script-fu-bhax-mandala" 
"<Image>/File/Create/BHAX"]]>
	    </programlisting>
        </para>        
<para>
A mandala maga a kozmosz, illetve különféle Istenek különféle vallási megjelenítése.Ősi indiai eredetű és elvarázsol mikor ránézel.Viszont a feladat megoldásához ez nem lesz elég nekünk.A következő programunk fő attrakciója az lenne , hogy megrajzoljon mandalát a GIMP-en belül , viszont ezt úgy tegye meg , hogy nem használja a grafikus felületet , csak a nyers kóddal kell , hogy dolgozzon.
</para>    
<para>
Első felében a programunknak több függvényt is definiálunk amelyekre a későbbiekben természetesen hivatkozhatunk is. A Lisp nyelv nagyon idegen még a szememnek / szemünknek , de ídővel ez is megszokható.
Ezek a definíciók azért lennének fontosak , hogy  a programunkat rövidítsük.Példának gyanánt a harmadik meghatározásban létrehozunk egy új képet amelynek megadjuk a szélességét, magasságát valamint a színét amelyet a nulla jelez. <function>gimp-image-new width height 0</function>.Most pedig elkészítjük az előtérszínt <function>set-foreground</function> , és ezzel a színnel feltöltjük az előteret.<function>gimp-draw-fill</function>.Ahol először előfordul a <function>set!</function> ott állítjuk be , hogy a mértékeket pixelben szémolja ki a programunk.<function>gimp-text-layer-new-image text font fontsize PIXELS</function>. Megadjuk szokásos módon a kép magasságát rajta leledző szöveg szélességét, és magánal a képünknek a szélességét.Majd a négy <function>step!</function>-ek lesznek a forgatások, ahol megadjuk , hogy a szöveg milyen módon hogyan legyen elforgatva.<function>gimp-item-transform-rotate</function>.Látjuk , hogy ezt a ROTATE jelzi.Az első opciónál 180 fokkal a másodikban pi/2-vel a harmadik-ban ppedig pi/4-el a negyedikben végül pi/6-al forgatunk. Ezt befejezően el is készült a képünk.
</para>
    </section>        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
</chapter>                
